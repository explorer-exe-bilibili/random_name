name: Build

on:
  push:
    branches: [ main, master, openGL ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, openGL ]
  workflow_dispatch:


jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x64
          - os: windows-latest
            arch: x64
            c_compiler: cl
            cpp_compiler: cl
            vcpkg_triplet: x64-windows-static-release

         # Windows ARM64
          - os: windows-11-arm
            arch: arm64
            c_compiler: cl
            cpp_compiler: cl
            vcpkg_triplet: arm64-windows-static-release
         # Windows x86
          - os: windows-latest
            arch: x86
            c_compiler: cl
            cpp_compiler: cl
            vcpkg_triplet: x86-windows-static

          # Linux x64
          - os: ubuntu-latest
            arch: x64-gcc
            c_compiler: gcc
            cpp_compiler: g++
            vcpkg_triplet: x64-linux-release

          # Linux x64
          - os: ubuntu-latest
            arch: x64
            c_compiler: clang
            cpp_compiler: clang++
            vcpkg_triplet: x64-linux-release
          
          # # Linux ARM64 (需要自托管 runner)
          # - os: ubuntu-24.04-arm
          #   arch: arm64
          #   c_compiler: gcc
          #   cpp_compiler: g++
          #   vcpkg_triplet: arm64-linux-release
          #   use_system_deps: true

          # macOS x64
          - os: macos-13  # Intel-based
            arch: x64
            c_compiler: clang
            cpp_compiler: clang++
            vcpkg_triplet: x64-osx-release
          
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest  # M1/M2-based
            arch: arm64
            c_compiler: clang
            cpp_compiler: clang++
            vcpkg_triplet: arm64-osx-release

    env:
      VCPKG_TARGET_TRIPLET: ${{ matrix.vcpkg_triplet }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
        # Windows 专用步骤
    - name: Setup MSVC Environment
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: Setup Windows Build Tools
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        where cl
        where link
        cl /? >nul 2>&1 && echo "MSVC compiler found" || echo "MSVC compiler NOT found"


    - name: Install system dependencies (Linux ARM64)
      if: matrix.use_system_deps == true
      shell: bash
      run: |
        sudo apt-get update
        
        # 安装基础构建工具
        sudo apt-get install -y \
          build-essential cmake ninja-build pkg-config git
        
        # 安装 FFMPEG 开发库
        sudo apt-get install -y \
          libavcodec-dev \
          libavformat-dev \
          libavutil-dev \
          libswscale-dev \
          libswresample-dev \
          libavfilter-dev
        
        # 安装其他图形和音频库
        sudo apt-get install -y \
          libfreetype6-dev \
          libglfw3-dev \
          libglm-dev \
          libwebp-dev \
          nlohmann-json3-dev \
          libsdl2-dev \
          libsdl2-mixer-dev \
          libopengl-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev 
          libglu1-mesa-dev 
        
        # 安装 X11 开发库
        sudo apt-get install -y \
          libx11-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev
        
        # 手动安装 GLAD (使用新的 GLAD2 语法)
        echo "Installing GLAD2..."
        cd /tmp
        
        # 使用 GLAD2 的正确语法生成 OpenGL 3.3 Core Profile
        python3 -m glad c --api="gl:core=3.3" --out-path=/tmp/glad_generated
        
        # 创建系统级安装
        sudo mkdir -p /usr/local/include
        sudo mkdir -p /usr/local/lib
        sudo cp -r /tmp/glad_generated/include/* /usr/local/include/
        
        # 编译 GLAD 库
        cd /tmp/glad_generated
        gcc -c src/gl.c -I include -fPIC -o glad.o
        ar rcs libglad.a glad.o
        sudo cp libglad.a /usr/local/lib/
        
        # 创建 CMake 配置文件
        sudo mkdir -p /usr/local/lib/cmake/glad
        sudo tee /usr/local/lib/cmake/glad/gladConfig.cmake > /dev/null << 'EOF'
        # GLAD CMake configuration
        
        find_path(GLAD_INCLUDE_DIR 
          NAMES glad/gl.h
          PATHS /usr/local/include
          NO_DEFAULT_PATH
        )
        
        find_library(GLAD_LIBRARY
          NAMES glad libglad
          PATHS /usr/local/lib
          NO_DEFAULT_PATH
        )
        
        if(GLAD_INCLUDE_DIR AND GLAD_LIBRARY)
          set(GLAD_FOUND TRUE)
          add_library(glad::glad STATIC IMPORTED)
          set_target_properties(glad::glad PROPERTIES
            IMPORTED_LOCATION "${GLAD_LIBRARY}"
            INTERFACE_INCLUDE_DIRECTORIES "${GLAD_INCLUDE_DIR}"
          )
          message(STATUS "Found GLAD: ${GLAD_LIBRARY}")
        else()
          set(GLAD_FOUND FALSE)
          message(WARNING "GLAD not found")
        endif()
        
        mark_as_advanced(GLAD_INCLUDE_DIR GLAD_LIBRARY)
        EOF
        
        echo "GLAD installation completed"

        # 安装 STB (简化版本)
        echo "Installing STB headers..."
        sudo mkdir -p /usr/local/include/stb
        cd /tmp
        wget -O stb_image.h https://raw.githubusercontent.com/nothings/stb/master/stb_image.h
        wget -O stb_image_write.h https://raw.githubusercontent.com/nothings/stb/master/stb_image_write.h
        wget -O stb_truetype.h https://raw.githubusercontent.com/nothings/stb/master/stb_truetype.h
        sudo cp stb_*.h /usr/local/include/stb/

    - name: Setup build environment
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          # 更新包管理器
          sudo apt-get update
          
          # 安装基础构建工具
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            git \
            curl \
            zip \
            unzip \
            tar
          
          # 安装多媒体相关工具
          sudo apt-get install -y \
            nasm \
            yasm
          
          # 安装 autotools 套件
          sudo apt-get install -y \
            autoconf \
            automake \
            autotools-dev \
            libtool \
            libltdl-dev \
            gettext \
            flex \
            bison \
            gperf
          
          # 安装开发库
          sudo apt-get install -y \
            libx11-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxcursor-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libasound2-dev \
            python3-dev \
            python3-setuptools \
            libibus-1.0-dev \
            libwayland-dev libxkbcommon-dev libegl1-mesa-dev \
            libx11-dev libxft-dev libxext-dev libminizip-dev
            
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install \
            nasm \
            yasm \
            ninja \
            autoconf \
            automake \
            libtool \
            gettext \
            pkg-config
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          # Windows 通常不需要额外安装，但可以安装 Ninja 作为备选
          choco install ninja -y || true
          # 确保 7zip 可用
          choco install 7zip -y
          # 添加到 PATH
          echo "C:\Program Files\7-Zip" >> $GITHUB_PATH
        fi
    - name: Download ChineseSimplified.isl
      if: matrix.os == 'windows-latest' || matrix.os == 'windows-11-arm'
      run: |
        Invoke-WebRequest -Uri "https://raw.github.com/jrsoftware/issrc/main/Files/Languages/Unofficial/ChineseSimplified.isl" -OutFile "C:\Program Files (x86)\Inno Setup 6\Languages\ChineseSimplified.isl"

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/build/vcpkg_installed
        key: vcpkg-${{ runner.os }}-${{matrix.arch}}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-${{matrix.arch}}-${{ hashFiles('**/vcpkg.json') }}

    - name: Cache Download
      uses: actions/cache@v4
      with:
        path: |
          C:/vcpkg/downloads
          ~/.cache/vcpkg
        key: vcpkg
        restore-keys: |
          vcpkg
        enableCrossOsArchive: true

    - name: Configure CMake
      shell: bash
      run: |
        if [[ "${{ matrix.arch }}" == "arm64" && "${{ runner.os }}" == "Windows" ]]; then
          VCPKG_FEATURES="basic-audio"
        else
          VCPKG_FEATURES="full-audio"
        fi
        if [[ "${{ matrix.use_system_deps }}" == "true" ]]; then
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TARGET_TRIPLET }} \
            -DVCPKG_MANIFEST_FEATURES="$VCPKG_FEATURES" \
            -DUSE_SYSTEM_DEPS=ON\
            -G Ninja
        else
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TARGET_TRIPLET }} \
            -DVCPKG_MANIFEST_FEATURES="$VCPKG_FEATURES" \
            -G Ninja
        fi

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config Release --parallel 4

    - name: Debug Build Output
      shell: bash
      run: |
        echo "=== Checking specific paths ==="
        ls -la build/bin/ || true

    - name: Create Archive (Debug Version)
      shell: bash
      run: |
        mkdir -p "${{ github.workspace }}/installer_files"

        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cp build/bin/*.exe "${{ github.workspace }}/installer_files/"
          cp build/bin/*.dll "${{ github.workspace }}/installer_files/" || true
          cp -r build/bin/files "${{ github.workspace }}/installer_files/" || true
        else
          cp -r build/bin/* "${{ github.workspace }}/installer_files/"
        fi

        cd "${{ github.workspace }}/installer_files"
        ls -la
        
        tar -czf ~/random_name_${{ matrix.arch }}_${{ runner.os }}.tar.gz *
        if command -v zip &> /dev/null; then
          zip -r ~/random_name_${{ matrix.arch }}_${{ runner.os }}.zip *
        elif command -v 7z &> /dev/null; then
          7z a ~/random_name_${{ matrix.arch }}_${{ runner.os }}.zip *
        else
          powershell -Command "Compress-Archive -Path './*' -DestinationPath '~/random_name_${{ matrix.arch }}_${{ runner.os }}.zip' -Force"
        fi

    - name: Create Installer
      if: matrix.os == 'windows-latest' || matrix.os == 'windows-11-arm'
      env: 
        GITHUB_ACTIONS: true
        SOURCE_DIR: ${{ github.workspace }}\installer_files
        OUTPUT_DIR: ${{ github.workspace }}\installer\Output
        ARCH: ${{ matrix.arch }}
        ICON_PATH: ${{ github.workspace }}\OIP-C.ico
      shell: pwsh
      run: |
        mkdir -p "${{ github.workspace }}/installer/Output" -ErrorAction SilentlyContinue
        Write-Host "SOURCE_DIR: $env:SOURCE_DIR"
        Write-Host "Checking if installer_files exists:"
        Get-ChildItem "${{ github.workspace }}\installer_files" | Format-Table -AutoSize
        iscc installer_action/common.iss
      continue-on-error: true

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: random_name_${{ matrix.arch }}_${{ runner.os }}
        path: |
          ~/random_name_${{ matrix.arch }}_${{ runner.os }}.tar.gz
          ~/random_name_${{ matrix.arch }}_${{ runner.os }}.zip
        retention-days: 30

    - name: Upload Installer
      if: matrix.os == 'windows-latest' || matrix.os == 'windows-11-arm'
      uses: actions/upload-artifact@v4
      with:
        name: random_name_${{ matrix.arch }}_${{ runner.os }}_installer
        path: ${{ github.workspace }}/installer/Output/*.exe
        retention-days: 30

    - name: prepare_release
      run: |
       cp ~/random_name_${{ matrix.arch }}_${{ runner.os }}.tar.gz "${{ github.workspace }}/random_name_${{ matrix.arch }}_${{ runner.os }}.tar.gz" || true
       cp ~/random_name_${{ matrix.arch }}_${{ runner.os }}.zip "${{ github.workspace }}/random_name_${{ matrix.arch }}_${{ runner.os }}.zip" || true
       mkdir -p "${{ github.workspace }}/installer_program"
       cp ${{ github.workspace }}/installer/Output/*.exe "${{ github.workspace }}/installer_program/" || true

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2.0.8
      with:
        files: |
          ${{ github.workspace }}/random_name_${{ matrix.arch }}_${{ runner.os }}.tar.gz
          ${{ github.workspace }}/random_name_${{ matrix.arch }}_${{ runner.os }}.zip
          ${{ github.workspace }}/installer_program/*.exe
        prerelease: true
        make_latest: false
        name: "Release action${{ github.ref_name }}"
        body: |
          Release from github actions
          This is a pre-release for the current build.
          - Commit: ${{ github.sha }}
          - Changes: ${{ github.event.head_commit.message }}
        tag_name: action${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
